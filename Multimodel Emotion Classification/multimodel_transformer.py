# -*- coding: utf-8 -*-
"""Multimodel Transformer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HcfMXvhqNJ75G6lqvXdaYBg9Yc5ooL8B

# **Multimodel Transformer**

Multimodal classification model using Transformers for processing audio, visual, and text data. Some of the main components used in this classifier are:

**Separate Transformer** Encoder modules are used for processing each modality: audio, visual, and text.

**Fusion Layer** combines the outputs from all modalities and performs classification.
A fully connected (FC) layer sequence is used for fusion and classification

Same methods are used for the forward pass output and feature fusion and at the end all features are concatinated and used for classification
"""

class MultimodalTransformer(nn.Module):
    def __init__(self, feature_dim, hidden_dim, num_classes):
        super(MultimodalTransformer, self).__init__()
        # Per-modality transformers
        self.audio_transformer = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(d_model=feature_dim, nhead=4), num_layers=2
        )
        self.visual_transformer = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(d_model=feature_dim, nhead=4), num_layers=2
        )
        self.text_transformer = nn.TransformerEncoder(
            nn.TransformerEncoderLayer(d_model=feature_dim, nhead=4), num_layers=2
        )
        # Fusion layer
        self.fc = nn.Sequential(
            nn.Linear(feature_dim * 3, hidden_dim),
            nn.Softmax(),
            nn.Linear(hidden_dim, num_classes)
        )

    def forward(self, audio, visual, text):
        # Transform each modality
        audio_out = self.audio_transformer(audio.unsqueeze(0)).squeeze(0)
        visual_out = self.visual_transformer(visual.unsqueeze(0)).squeeze(0)
        text_out = self.text_transformer(text.unsqueeze(0)).squeeze(0)

        # Concatenate all modalities
        combined = torch.cat((audio_out, visual_out, text_out), dim=-1)
        output = self.fc(combined)
        return output