# -*- coding: utf-8 -*-
"""VAEGAN Translator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HcfMXvhqNJ75G6lqvXdaYBg9Yc5ooL8B

# **VAEGAN Translator**

The VAEGAN class, combining encoding, decoding, and discriminative capabilities for all this softmax activation is used.

This setup is useful in generating high-quality data and learning meaningful latent representations.

Method initializes three main components of the model: an encoder, a decoder, and a discriminator.
"""

class VAEGAN(nn.Module):
    def __init__(self, input_dim, hidden_dim, output_dim):
        super(VAEGAN, self).__init__()
        self.encoder = nn.Sequential(
            nn.Linear(input_dim, hidden_dim),
            nn.Softmax(),
            nn.Linear(hidden_dim, hidden_dim)
        )
        self.decoder = nn.Sequential(
            nn.Linear(hidden_dim, hidden_dim),
            nn.Softmax(),
            nn.Linear(hidden_dim, output_dim),
            nn.Tanh()
        )
        self.discriminator = nn.Sequential(
            nn.Linear(output_dim, hidden_dim),
            nn.Softmax(),
            nn.Linear(hidden_dim, 1),
            nn.Sigmoid()
        )

    def forward(self, x):
        encoded = self.encoder(x)
        reconstructed = self.decoder(encoded)
        validity = self.discriminator(reconstructed)
        return reconstructed, validity